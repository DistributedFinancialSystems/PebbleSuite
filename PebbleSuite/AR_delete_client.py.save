#Python Standard Library dependencies
import sqlite3
import tkinter as tk
from tkinter import ttk
from tkinter.ttk import *
from tkinter.messagebox import showinfo




class DELETE_CLIENT_ENTRY:


	def __init__(self,delete_client_entry):

		self.delete_client_entry = delete_client_entry


	def delete_data(self):

		#Define SQL.db database scripts:
		query_client_sql_script = '''SELECT * FROM clients WHERE CLIENT_NAME=?'''
		delete_client_sql_script = '''DELETE FROM clients WHERE CLIENT_NAME=?'''
		query_client_invoices_sql_script = '''SELECT * FROM client_invoices WHERE INVOICE_NAME=?;'''
		delete_client_invoices_sql_script = '''DELETE FROM client_invoices WHERE INVOICE_NAME=?;'''
		query_client_credit_memos_sql_script = '''SELECT * FROM client_credit_memos WHERE CREDIT_MEMO_NAME=?;'''
		delete_client_credit_memos_sql_script = '''DELETE FROM client_credit_memos WHERE CREDIT_MEMO_NAME=?;'''
		query_client_journal_entries_sql_script = '''SELECT * FROM journal_entries WHERE JOURNAL_ENTRY_CLIENT_NAME=?;'''
		delete_client_journal_entries_sql_script = '''DELETE FROM journal_entries WHERE JOURNAL_ENTRY_CLIENT_NAME=?;'''

		#Initialize SQL.db connection:
		with sqlite3.connect("SQL.db") as connection:

			try:

				cursor = connection.cursor()
				cursor.execute(query_client_sql_script,[self.delete_client_entry])
				cursor.execute(delete_client_sql_script,[self.delete_client_entry])
				connection.commit()
				cursor.close()
				delete_client_confirmation_message = tk.messagebox.showinfo(title="Delete Client",message="Client contact data successfully deleted")

			except sqlite3.Error as error:

				delete_client_error_message = tk.messagebox.showinfo(title="Delete Client",message=f"{error}")

			try:

				cursor = connection.cursor()
				cursor.execute(query_client_invoices_sql_script,[self.delete_client_entry])
				cursor.execute(delete_client_invoices_sql_script,[self.delete_client_entry])
				connection.commit()
				cursor.close()
				delete_client_invoices_confirmation_message = tk.messagebox.showinfo(title="Delete Client",message="Client invoice data successfully deleted")

			except sqlite3.Error as error:

				delete_client_invoices_error_message = tk.messagebox.showinfo(title="Delete Client",message=f"{error}")

			try:

				cursor = connection.cursor()
				cursor.execute(query_client_credit_memos_sql_script,[self.delete_client_entry])
				cursor.execute(delete_client_credit_memos_sql_script,[self.delete_client_entry])
				connection.commit()
				cursor.close()
				delete_client_credit_memos_confirmation_message = tk.messagebox.showinfo(title="Delete Client",message="Client credit memo data successfully deleted")

			except sqlite3.Error as error:

				delete_client_credit_memos_error_message = tk.messagebox.showinfo(title="Delete Client",message=f"{error}")

			try:

				rf

			except sqlite3.Error as error:

				x




class DELETE_CLIENT_WINDOW(tk.Toplevel):

	#Define SQL database scripts:
	client_sql_script = '''SELECT CLIENT_NAME FROM clients;'''


	#Define class variables
	alive = False
	dummy_variable = "null"


	#Define class functions
	def __init__(self,*args,**kwargs):

		client_data = []
		options = ["Select Client"]


		#Initialize SQL.db connection:
		with sqlite3.connect("SQL.db") as connection:

			cursor = connection.cursor()
			cursor.execute(self.client_sql_script)

			for item in cursor:
				options.append(" ".join(item))

			connection.commit()
			cursor.close()


		#Define DELETE_CLIENT_WINDOW tkinter widgets:
		super().__init__(*args,**kwargs)
		self.config(width=390,height=150)
		self.title("Delete Client")
		self.focus()
		self.resizable(0,0)
		self.__class__.alive = True
		self.clicked = tk.StringVar()
		self.clicked.set(f"{options[0]}")
		self.client_name_label = ttk.Label(self,text="Client Name")
		self.client_name_label.place(x=20,y=40)
		self.client_option_menu = ttk.OptionMenu(self,self.clicked,options[0],*options)
		self.client_option_menu.place(x=200,y=40)
		self.delete_client_button = ttk.Button(self,text="Delete Client",command=self.delete_client)
		self.delete_client_button.place(x=20,y=110)


	def delete_client(self):


		#Define delete_client variables:
		client_data = self.clicked.get()


		#Define delete_client error message:
		if client_data == "Select Client":

			delete_client_error_message = tk.messagebox.showinfo(title="Error",message="Select a client to delete.")


		#Initialize SQL.db connection:
		else:

			delete_object = DELETE_CLIENT_ENTRY(client_data)
			delete_object.delete_data()


	def destroy(self):

		self.__class__.alive = False
		return super().destroy()
